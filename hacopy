import string
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def update(raw_list):
  updated_damages = []
  for i in raw_list:
    if "M" in i:
      float_val = float(i.strip("M"))
      updated_damages.append(float_val*conversion["M"])
    elif "B" in i:
      float_val = float(i.strip("B"))
      updated_damages.append(float_val*conversion["B"])
    else:
      updated_damages.append(i)
  return updated_damages
new_damages = update(damages)

# 2 
# Create a Table
def hurricanes_by_name():
  all_hurricanes = {}
  data = []
  for i in range(len(names)):
    new_hurricane = {}
    new_hurricane["Name"] = names[i]
    new_hurricane["Month"] = months[i]
    new_hurricane["Year"] = years[i]
    new_hurricane["Max Sustained Wind"] = max_sustained_winds[i]
    new_hurricane["Areas Affected"] = areas_affected[i]
    new_hurricane["Damage"] = new_damages[i]
    new_hurricane["Death"] = deaths[i]
    all_hurricanes[names[i]] = new_hurricane
  return all_hurricanes
all_hurricanes = hurricanes_by_name()
# 3
# Organizing by Year
def hurricanes_by_year():
  year_hurricanes = {}
  counter = 0
  for i in all_hurricanes:
    year_hurricanes[years[counter]] = all_hurricanes[i]
    counter+=1
  return year_hurricanes
all_hurricanes_years = hurricanes_by_year()

# 4
# Counting Damaged Areas
def affected_area_count():
  area_count = {}
  for i in areas_affected:
    for x in i:
      if x not in area_count:
        area_count[x] = 1;
      else:
        area_count[x]+=1;
  return area_count
area_counts = affected_area_count()
# 5 
# Calculating Maximum Hurricane Count
def most_hurricanes_area(area_dict):
  area_name = ""
  hit_count = 0
  for i in area_dict:
    if area_dict[i] > hit_count:
      area_name = i
      hit_count = area_dict[i]
    else:
      continue
  return (area_name + " is the area affected by the most hurricanes and has been hit " + str(hit_count) + " times.")

print(most_hurricanes_area(area_counts))

# 6
# Calculating the Deadliest Hurricane
def hurricane_most_deaths(dictionary):
  name = ""
  death_count = 0
  for i, x in dictionary.items():
    deaths = x.get("Death")
    if deaths > death_count:
      death_count = deaths
      name = i
    else:
      continue
    
  return (name + " caused the greatest number of deaths which totaled " + str(death_count) + " deaths.")

print(hurricane_most_deaths(all_hurricanes))
# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
def hurricanes_by_mortality():
  hurricanes_by_mort = {}
  for i in range(6):
    hurricanes_by_mort[i] = []
  for x, y in all_hurricanes.items():
    if y.get("Death") == 0:
      hurricanes_by_mort[0].append(y)
    elif y.get("Death") > 0 and y.get("Death") <= 100:
      hurricanes_by_mort[1].append(y)
    elif y.get("Death") > 100 and y.get("Death") <= 500:
      hurricanes_by_mort[2].append(y)
    elif y.get("Death") > 500 and y.get("Death") <= 1000:
      hurricanes_by_mort[3].append(y)
    elif y.get("Death") > 1000 and y.get("Death") <= 10000:
      hurricanes_by_mort[4].append(y)
    elif y.get("Death") > 10000:
      hurricanes_by_mort[5].append(y)
    else:
      continue
  return hurricanes_by_mort


# 8 Calculating Hurricane Maximum Damage
def most_damage_hurricane():
  name = ""
  damage_cost = 0
  counter = 0
  for i in new_damages:
    if i == "Damages not recorded":
      counter+=1
    elif i > damage_cost:
      name = names[counter]
      damage_cost = i
      counter+=1
  return name + " caused the most damage with damage costs of $" + str(damage_cost)

print(most_damage_hurricane())

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
def hurricanes_by_damage():
  hurricanes_by_dam = {}
  for i in range(6):
    hurricanes_by_dam[i] = []
  for x, y in all_hurricanes.items():
    if y.get("Damage") == "Damages not recorded":
      continue
    elif y.get("Damage") == 0:
      hurricanes_by_dam[0].append(y)
    elif y.get("Damage") > 0 and y.get("Damage") <= 100000000:
      hurricanes_by_dam[1].append(y)
    elif y.get("Damage") > 100000000 and y.get("Damage") <= 1000000000:
      hurricanes_by_dam[2].append(y)
    elif y.get("Damage") > 1000000000 and y.get("Damage") <= 10000000000:
      hurricanes_by_dam[3].append(y)
    elif y.get("Damage") > 10000000000 and y.get("Damage") <= 50000000000:
      hurricanes_by_dam[4].append(y)
    elif y.get("Damage") > 50000000000:
      hurricanes_by_dam[5].append(y)
    else:
      continue
  return hurricanes_by_dam

print(hurricanes_by_damage().get(5))
